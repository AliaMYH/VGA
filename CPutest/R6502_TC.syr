Release 14.2 - xst P.28xd (nt64)
Copyright (c) 1995-2012 Xilinx, Inc.  All rights reserved.
--> Parameter TMPDIR set to xst/projnav.tmp


Total REAL time to Xst completion: 0.00 secs
Total CPU time to Xst completion: 0.08 secs
 
--> Parameter xsthdpdir set to xst


Total REAL time to Xst completion: 0.00 secs
Total CPU time to Xst completion: 0.08 secs
 
--> Reading design: R6502_TC.prj

TABLE OF CONTENTS
  1) Synthesis Options Summary
  2) HDL Parsing
  3) HDL Elaboration
  4) HDL Synthesis
       4.1) HDL Synthesis Report
  5) Advanced HDL Synthesis
       5.1) Advanced HDL Synthesis Report
  6) Low Level Synthesis
  7) Partition Report
  8) Design Summary
       8.1) Primitive and Black Box Usage
       8.2) Device utilization summary
       8.3) Partition Resource Summary
       8.4) Timing Report
            8.4.1) Clock Information
            8.4.2) Asynchronous Control Signals Information
            8.4.3) Timing Summary
            8.4.4) Timing Details
            8.4.5) Cross Clock Domains Report


=========================================================================
*                      Synthesis Options Summary                        *
=========================================================================
---- Source Parameters
Input File Name                    : "R6502_TC.prj"
Ignore Synthesis Constraint File   : NO

---- Target Parameters
Output File Name                   : "R6502_TC"
Output Format                      : NGC
Target Device                      : xc7a100t-3-csg324

---- Source Options
Top Module Name                    : R6502_TC
Automatic FSM Extraction           : YES
FSM Encoding Algorithm             : Auto
Safe Implementation                : No
FSM Style                          : LUT
RAM Extraction                     : Yes
RAM Style                          : Auto
ROM Extraction                     : Yes
Shift Register Extraction          : YES
ROM Style                          : Auto
Resource Sharing                   : YES
Asynchronous To Synchronous        : NO
Shift Register Minimum Size        : 2
Use DSP Block                      : Auto
Automatic Register Balancing       : No

---- Target Options
LUT Combining                      : Auto
Reduce Control Sets                : Auto
Add IO Buffers                     : YES
Global Maximum Fanout              : 100000
Add Generic Clock Buffer(BUFG)     : 32
Register Duplication               : YES
Optimize Instantiated Primitives   : NO
Use Clock Enable                   : Auto
Use Synchronous Set                : Auto
Use Synchronous Reset              : Auto
Pack IO Registers into IOBs        : Auto
Equivalent register Removal        : YES

---- General Options
Optimization Goal                  : Speed
Optimization Effort                : 1
Power Reduction                    : NO
Keep Hierarchy                     : No
Netlist Hierarchy                  : As_Optimized
RTL Output                         : Yes
Global Optimization                : AllClockNets
Read Cores                         : YES
Write Timing Constraints           : NO
Cross Clock Analysis               : NO
Hierarchy Separator                : /
Bus Delimiter                      : <>
Case Specifier                     : Maintain
Slice Utilization Ratio            : 100
BRAM Utilization Ratio             : 100
DSP48 Utilization Ratio            : 100
Auto BRAM Packing                  : NO
Slice Utilization Ratio Delta      : 5

=========================================================================


=========================================================================
*                          HDL Parsing                                  *
=========================================================================
Parsing VHDL file "\\psf\home\Desktop\github\DigitalProject2\VGA\cpu6502_true_cycle\trunk\rtl\vhdl\reg_sp.vhd" into library work
Parsing entity <Reg_SP>.
Parsing architecture <struct> of entity <reg_sp>.
Parsing VHDL file "\\psf\home\Desktop\github\DigitalProject2\VGA\cpu6502_true_cycle\trunk\rtl\vhdl\reg_pc.vhd" into library work
Parsing entity <Reg_PC>.
Parsing architecture <struct> of entity <reg_pc>.
Parsing VHDL file "\\psf\home\Desktop\github\DigitalProject2\VGA\cpu6502_true_cycle\trunk\rtl\vhdl\regbank_axy.vhd" into library work
Parsing entity <RegBank_AXY>.
Parsing architecture <struct> of entity <regbank_axy>.
Parsing VHDL file "\\psf\home\Desktop\github\DigitalProject2\VGA\cpu6502_true_cycle\trunk\rtl\vhdl\fsm_nmi.vhd" into library work
Parsing entity <FSM_NMI>.
Parsing architecture <fsm> of entity <fsm_nmi>.
Parsing VHDL file "\\psf\home\Desktop\github\DigitalProject2\VGA\cpu6502_true_cycle\trunk\rtl\vhdl\fsm_execution_unit.vhd" into library work
Parsing entity <FSM_Execution_Unit>.
Parsing architecture <fsm> of entity <fsm_execution_unit>.
Parsing VHDL file "\\psf\home\Desktop\github\DigitalProject2\VGA\cpu6502_true_cycle\trunk\rtl\vhdl\core.vhd" into library work
Parsing entity <Core>.
Parsing architecture <struct> of entity <core>.
Parsing VHDL file "\\psf\home\Desktop\github\DigitalProject2\VGA\cpu6502_true_cycle\trunk\rtl\vhdl\r6502_tc.vhd" into library work
Parsing entity <R6502_TC>.
Parsing architecture <struct> of entity <r6502_tc>.

=========================================================================
*                            HDL Elaboration                            *
=========================================================================

Elaborating entity <R6502_TC> (architecture <struct>) from library <work>.

Elaborating entity <Core> (architecture <struct>) from library <work>.

Elaborating entity <FSM_Execution_Unit> (architecture <fsm>) from library <work>.

Elaborating entity <FSM_NMI> (architecture <fsm>) from library <work>.
INFO:HDLCompiler:679 - "\\psf\home\Desktop\github\DigitalProject2\VGA\cpu6502_true_cycle\trunk\rtl\vhdl\fsm_nmi.vhd" Line 159. Case statement is complete. others clause is never selected

Elaborating entity <RegBank_AXY> (architecture <struct>) from library <work>.
INFO:HDLCompiler:679 - "\\psf\home\Desktop\github\DigitalProject2\VGA\cpu6502_true_cycle\trunk\rtl\vhdl\regbank_axy.vhd" Line 167. Case statement is complete. others clause is never selected
INFO:HDLCompiler:679 - "\\psf\home\Desktop\github\DigitalProject2\VGA\cpu6502_true_cycle\trunk\rtl\vhdl\regbank_axy.vhd" Line 180. Case statement is complete. others clause is never selected

Elaborating entity <Reg_PC> (architecture <struct>) from library <work>.
INFO:HDLCompiler:679 - "\\psf\home\Desktop\github\DigitalProject2\VGA\cpu6502_true_cycle\trunk\rtl\vhdl\reg_pc.vhd" Line 178. Case statement is complete. others clause is never selected
INFO:HDLCompiler:679 - "\\psf\home\Desktop\github\DigitalProject2\VGA\cpu6502_true_cycle\trunk\rtl\vhdl\reg_pc.vhd" Line 191. Case statement is complete. others clause is never selected

Elaborating entity <Reg_SP> (architecture <struct>) from library <work>.
INFO:HDLCompiler:679 - "\\psf\home\Desktop\github\DigitalProject2\VGA\cpu6502_true_cycle\trunk\rtl\vhdl\reg_sp.vhd" Line 133. Case statement is complete. others clause is never selected

=========================================================================
*                           HDL Synthesis                               *
=========================================================================

Synthesizing Unit <R6502_TC>.
    Related source file is "\\psf\home\Desktop\github\DigitalProject2\VGA\cpu6502_true_cycle\trunk\rtl\vhdl\r6502_tc.vhd".
    Summary:
	no macro.
Unit <R6502_TC> synthesized.

Synthesizing Unit <Core>.
    Related source file is "\\psf\home\Desktop\github\DigitalProject2\VGA\cpu6502_true_cycle\trunk\rtl\vhdl\core.vhd".
    Found 9-bit adder for signal <u_11combo_proc.temp_sum> created at line 225.
    Summary:
	inferred   1 Adder/Subtractor(s).
Unit <Core> synthesized.

Synthesizing Unit <FSM_Execution_Unit>.
    Related source file is "\\psf\home\Desktop\github\DigitalProject2\VGA\cpu6502_true_cycle\trunk\rtl\vhdl\fsm_execution_unit.vhd".
    Found 1-bit register for signal <wr_n_o_cld>.
    Found 8-bit register for signal <d_o_cld>.
    Found 8-bit register for signal <zw_REG_OP>.
    Found 8-bit register for signal <zw_b1>.
    Found 8-bit register for signal <zw_b2>.
    Found 8-bit register for signal <zw_b3>.
    Found 8-bit register for signal <zw_b4>.
    Found 8-bit register for signal <reg_F>.
    Found 2-bit register for signal <reg_sel_pc_val>.
    Found 2-bit register for signal <reg_sel_rb_in>.
    Found 2-bit register for signal <reg_sel_rb_out>.
    Found 2-bit register for signal <reg_sel_reg>.
    Found 16-bit register for signal <sig_PC>.
    Found 8-bit register for signal <current_state>.
    Found 1-bit register for signal <rd_o_cld>.
    Found 1-bit register for signal <sync_o_cld>.
    Found 1-bit register for signal <wr_o_cld>.
    Found 1-bit register for signal <reg_sel_pc_in>.
    Found 1-bit register for signal <reg_sel_sp_as>.
    Found 1-bit register for signal <reg_sel_sp_in>.
    Found 1-bit register for signal <zw_so>.
    Found finite state machine <FSM_0> for signal <current_state>.
    -----------------------------------------------------------------------
    | States             | 133                                            |
    | Transitions        | 415                                            |
    | Inputs             | 113                                            |
    | Outputs            | 18                                             |
    | Clock              | clk_clk_i (rising_edge)                        |
    | Reset              | rst_rst_n_i (negative)                         |
    | Reset type         | asynchronous                                   |
    | Reset State        | 01001011                                       |
    | Encoding           | auto                                           |
    | Implementation     | LUT                                            |
    -----------------------------------------------------------------------
    Found 9-bit adder for signal <n3965> created at line 4241.
    Found 9-bit adder for signal <GND_6_o_GND_6_o_add_2315_OUT> created at line 4241.
    Found 9-bit adder for signal <n3970> created at line 4540.
    Found 9-bit adder for signal <GND_6_o_GND_6_o_add_2568_OUT> created at line 4540.
    Found 4-bit adder for signal <zw_ALU2[3]_GND_6_o_add_2569_OUT> created at line 4546.
    Found 4-bit adder for signal <zw_ALU1[3]_GND_6_o_add_2570_OUT> created at line 4547.
    Found 5-bit adder for signal <GND_6_o_GND_6_o_add_2571_OUT> created at line 4552.
    Found 5-bit adder for signal <n3984> created at line 4553.
    Found 5-bit adder for signal <GND_6_o_GND_6_o_add_2573_OUT> created at line 4553.
    Found 5-bit adder for signal <GND_6_o_GND_6_o_add_2574_OUT> created at line 4555.
    Found 5-bit adder for signal <n3992> created at line 4556.
    Found 5-bit adder for signal <GND_6_o_GND_6_o_add_2576_OUT> created at line 4556.
    Found 9-bit adder for signal <n3998> created at line 4622.
    Found 9-bit adder for signal <GND_6_o_GND_6_o_add_2615_OUT> created at line 4622.
    Found 4-bit adder for signal <zw_ALU2[3]_zw_ALU6[3]_add_2623_OUT> created at line 4659.
    Found 4-bit adder for signal <zw_ALU1[3]_zw_ALU5[3]_add_2624_OUT> created at line 4660.
    Found 5-bit adder for signal <n4010> created at line 4666.
    Found 5-bit adder for signal <GND_6_o_GND_6_o_add_2628_OUT> created at line 4666.
    Found 5-bit adder for signal <n4016> created at line 4669.
    Found 5-bit adder for signal <GND_6_o_GND_6_o_add_2632_OUT> created at line 4669.
    Found 8-bit comparator equal for signal <adr_nxt_pc_i[15]_zw_b3[7]_equal_2607_o> created at line 4585
    Summary:
	inferred  20 Adder/Subtractor(s).
	inferred  88 D-type flip-flop(s).
	inferred   1 Comparator(s).
	inferred 1255 Multiplexer(s).
	inferred   1 Finite State Machine(s).
Unit <FSM_Execution_Unit> synthesized.

Synthesizing Unit <FSM_NMI>.
    Related source file is "\\psf\home\Desktop\github\DigitalProject2\VGA\cpu6502_true_cycle\trunk\rtl\vhdl\fsm_nmi.vhd".
    Found 2-bit register for signal <current_state>.
    Found 1-bit register for signal <nmi_o_cld>.
    Found finite state machine <FSM_1> for signal <current_state>.
    -----------------------------------------------------------------------
    | States             | 4                                              |
    | Transitions        | 8                                              |
    | Inputs             | 2                                              |
    | Outputs            | 2                                              |
    | Clock              | clk_clk_i (rising_edge)                        |
    | Reset              | rst_rst_n_i (negative)                         |
    | Reset type         | asynchronous                                   |
    | Reset State        | 00                                             |
    | Encoding           | auto                                           |
    | Implementation     | LUT                                            |
    -----------------------------------------------------------------------
    Summary:
	inferred   1 D-type flip-flop(s).
	inferred   1 Multiplexer(s).
	inferred   1 Finite State Machine(s).
Unit <FSM_NMI> synthesized.

Synthesizing Unit <RegBank_AXY>.
    Related source file is "\\psf\home\Desktop\github\DigitalProject2\VGA\cpu6502_true_cycle\trunk\rtl\vhdl\regbank_axy.vhd".
    Found 8-bit register for signal <mw_U_4reg_cval>.
    Found 8-bit register for signal <mw_U_5reg_cval>.
    Found 8-bit register for signal <mw_U_0reg_cval>.
    Found 8-bit 4-to-1 multiplexer for signal <d_regs_out_o> created at line 162.
    Found 8-bit 4-to-1 multiplexer for signal <q_mux_o_i> created at line 175.
    Summary:
	inferred  24 D-type flip-flop(s).
	inferred   2 Multiplexer(s).
Unit <RegBank_AXY> synthesized.

Synthesizing Unit <Reg_PC>.
    Related source file is "\\psf\home\Desktop\github\DigitalProject2\VGA\cpu6502_true_cycle\trunk\rtl\vhdl\reg_pc.vhd".
    Found 8-bit register for signal <mw_U_4reg_cval>.
    Found 8-bit register for signal <mw_U_0reg_cval>.
    Found 9-bit adder for signal <u_2combo_proc.temp_sum> created at line 112.
    Found 9-bit adder for signal <n0087> created at line 127.
    Found 9-bit adder for signal <u_11combo_proc.temp_sum> created at line 127.
    Summary:
	inferred   3 Adder/Subtractor(s).
	inferred  16 D-type flip-flop(s).
	inferred   1 Multiplexer(s).
Unit <Reg_PC> synthesized.

Synthesizing Unit <Reg_SP>.
    Related source file is "\\psf\home\Desktop\github\DigitalProject2\VGA\cpu6502_true_cycle\trunk\rtl\vhdl\reg_sp.vhd".
    Found 8-bit register for signal <mw_U_0reg_cval>.
    Found 9-bit adder for signal <GND_11_o_GND_11_o_add_1_OUT> created at line 95.
    Found 9-bit subtractor for signal <GND_11_o_GND_11_o_sub_4_OUT<8:0>> created at line 97.
    Summary:
	inferred   1 Adder/Subtractor(s).
	inferred   8 D-type flip-flop(s).
	inferred   1 Multiplexer(s).
Unit <Reg_SP> synthesized.

=========================================================================
HDL Synthesis Report

Macro Statistics
# Adders/Subtractors                                   : 25
 4-bit adder                                           : 4
 5-bit adder                                           : 10
 9-bit adder                                           : 10
 9-bit addsub                                          : 1
# Registers                                            : 27
 1-bit register                                        : 9
 16-bit register                                       : 1
 2-bit register                                        : 4
 8-bit register                                        : 13
# Comparators                                          : 1
 8-bit comparator equal                                : 1
# Multiplexers                                         : 1260
 1-bit 2-to-1 multiplexer                              : 433
 16-bit 2-to-1 multiplexer                             : 163
 2-bit 2-to-1 multiplexer                              : 169
 4-bit 2-to-1 multiplexer                              : 64
 5-bit 2-to-1 multiplexer                              : 100
 8-bit 2-to-1 multiplexer                              : 281
 8-bit 4-to-1 multiplexer                              : 2
 9-bit 2-to-1 multiplexer                              : 48
# FSMs                                                 : 2
# Xors                                                 : 2
 1-bit xor2                                            : 1
 8-bit xor2                                            : 1

=========================================================================

=========================================================================
*                       Advanced HDL Synthesis                          *
=========================================================================


=========================================================================
Advanced HDL Synthesis Report

Macro Statistics
# Adders/Subtractors                                   : 17
 4-bit adder                                           : 4
 5-bit adder                                           : 2
 5-bit adder carry in                                  : 4
 8-bit adder carry in                                  : 1
 9-bit adder                                           : 2
 9-bit adder carry in                                  : 3
 9-bit addsub                                          : 1
# Registers                                            : 137
 Flip-Flops                                            : 137
# Comparators                                          : 1
 8-bit comparator equal                                : 1
# Multiplexers                                         : 1274
 1-bit 2-to-1 multiplexer                              : 448
 16-bit 2-to-1 multiplexer                             : 162
 2-bit 2-to-1 multiplexer                              : 169
 4-bit 2-to-1 multiplexer                              : 64
 5-bit 2-to-1 multiplexer                              : 100
 8-bit 2-to-1 multiplexer                              : 281
 8-bit 4-to-1 multiplexer                              : 2
 9-bit 2-to-1 multiplexer                              : 48
# FSMs                                                 : 2
# Xors                                                 : 2
 1-bit xor2                                            : 1
 8-bit xor2                                            : 1

=========================================================================

=========================================================================
*                         Low Level Synthesis                           *
=========================================================================
Analyzing FSM <MFsm> for best encoding.
Optimizing FSM <U_0/FSM_1> on signal <current_state[1:2]> with user encoding.
-------------------
 State | Encoding
-------------------
 00    | 00
 01    | 01
 11    | 11
 10    | 10
-------------------
Analyzing FSM <MFsm> for best encoding.
Optimizing FSM <U_0/U_4/FSM_0> on signal <current_state[1:133]> with one-hot encoding.
---------------------------------------------------------------------------------------------------------------------------------------------------
 State    | Encoding
---------------------------------------------------------------------------------------------------------------------------------------------------
 01001011 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
 00000000 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010
 00000001 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100
 00000111 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000
 01100101 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000
 01100111 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000
 01100110 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000
 01100010 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000
 00001000 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
 00000110 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000
 00000010 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000
 00000011 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000
 01001010 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000
 00111011 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000
 00111100 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000
 01110011 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000
 00110111 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000
 00110011 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000
 00110000 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000
 00010001 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000
 01100100 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000
 00101011 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000
 00001110 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000
 00001111 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000
 01111011 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000
 00001101 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000
 00001100 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000
 00000100 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000
 00000101 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000
 00101100 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000
 01110111 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000
 01011000 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000
 01010111 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000
 01000001 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000
 00011111 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000
 00011101 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000
 00011001 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000
 00011000 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000
 00011011 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000
 00011010 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000
 00011110 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000
 00001001 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000
 00001010 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000
 00001011 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000
 00010000 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000
 00010011 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000
 00010100 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000
 00010010 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000
 00010101 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000
 00010110 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000
 00011100 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000
 00010111 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000
 01100000 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000
 00100000 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000
 00100010 | 0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000
 00100110 | 0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000
 01100011 | 0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000
 00100101 | 0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000
 00100111 | 0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000
 00101000 | 0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000
 00101001 | 0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000
 00101010 | 0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000
 00101110 | 0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000
 00100100 | 0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000
 00101101 | 0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000
 00101111 | 0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000
 00110001 | 0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000
 00110010 | 0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000
 00110110 | 0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000
 00110100 | 0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000
 00110101 | 0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000
 00111000 | 0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000
 00111001 | 0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000
 00111010 | 0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000
 00111101 | 0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000
 00111111 | 0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000
 00111110 | 0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000
 11000000 | 0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000
 01000000 | 0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000
 01000010 | 0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000
 01000011 | 0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000
 01000100 | 0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000
 01000101 | 0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000
 01000110 | 0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000
 01001110 | 0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 01000111 | 0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 01001000 | 0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 01001001 | 0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 01001100 | 0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 01001101 | 0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 01001111 | 0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 00100011 | 0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 01010000 | 0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 01010011 | 0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 01010001 | 0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 01010010 | 0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 01010110 | 0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 01010100 | 0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 01011010 | 0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 01010101 | 0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 01011011 | 0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 01011111 | 0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 01011100 | 0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 01011101 | 0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 01011001 | 0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 01011110 | 0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 01100001 | 0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 00100001 | 0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 01101010 | 0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 01101011 | 0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 01101110 | 0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 01101111 | 0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 01101101 | 0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 01101100 | 0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 01111000 | 0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 01101000 | 0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 01111001 | 0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 01101001 | 0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 01110000 | 0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 01110001 | 0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 01110010 | 0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 01110110 | 0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 01110100 | 0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 01110101 | 0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 01111010 | 0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 01111100 | 0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 01111110 | 0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 01111111 | 0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 01111101 | 0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 11000011 | 0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 11000001 | 0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 11000010 | 0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 11000110 | 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
---------------------------------------------------------------------------------------------------------------------------------------------------
INFO:Xst:2261 - The FF/Latch <zw_b4_1> in Unit <FSM_Execution_Unit> is equivalent to the following 6 FFs/Latches, which will be removed : <zw_b4_2> <zw_b4_3> <zw_b4_4> <zw_b4_5> <zw_b4_6> <zw_b4_7> 

Optimizing unit <R6502_TC> ...

Optimizing unit <Core> ...

Optimizing unit <RegBank_AXY> ...

Optimizing unit <Reg_PC> ...

Optimizing unit <Reg_SP> ...

Mapping all equations...
Building and optimizing final netlist ...
Found area constraint ratio of 100 (+ 5) on block R6502_TC, actual ratio is 3.
FlipFlop U_0/U_4/current_state_FSM_FFd101 has been replicated 1 time(s)
FlipFlop U_0/U_4/current_state_FSM_FFd33 has been replicated 1 time(s)
FlipFlop U_0/U_4/current_state_FSM_FFd35 has been replicated 1 time(s)
FlipFlop U_0/U_4/reg_F_3 has been replicated 1 time(s)
FlipFlop U_0/U_4/zw_REG_OP_0 has been replicated 1 time(s)
INFO:Xst:1843 - HDL ADVISOR - FlipFlop U_0/U_4/zw_REG_OP_0 connected to a primary input has been replicated
FlipFlop U_0/U_4/zw_REG_OP_1 has been replicated 1 time(s)
INFO:Xst:1843 - HDL ADVISOR - FlipFlop U_0/U_4/zw_REG_OP_1 connected to a primary input has been replicated
FlipFlop U_0/U_4/zw_REG_OP_2 has been replicated 2 time(s)
INFO:Xst:1843 - HDL ADVISOR - FlipFlop U_0/U_4/zw_REG_OP_2 connected to a primary input has been replicated
FlipFlop U_0/U_4/zw_REG_OP_3 has been replicated 3 time(s)
INFO:Xst:1843 - HDL ADVISOR - FlipFlop U_0/U_4/zw_REG_OP_3 connected to a primary input has been replicated
FlipFlop U_0/U_4/zw_REG_OP_4 has been replicated 2 time(s)
INFO:Xst:1843 - HDL ADVISOR - FlipFlop U_0/U_4/zw_REG_OP_4 connected to a primary input has been replicated
FlipFlop U_0/U_4/zw_REG_OP_6 has been replicated 1 time(s)
INFO:Xst:1843 - HDL ADVISOR - FlipFlop U_0/U_4/zw_REG_OP_6 connected to a primary input has been replicated
FlipFlop U_0/U_4/zw_REG_OP_7 has been replicated 4 time(s)
INFO:Xst:1843 - HDL ADVISOR - FlipFlop U_0/U_4/zw_REG_OP_7 connected to a primary input has been replicated
FlipFlop U_0/U_4/zw_b2_0 has been replicated 1 time(s)

Final Macro Processing ...

=========================================================================
Final Register Report

Macro Statistics
# Registers                                            : 285
 Flip-Flops                                            : 285

=========================================================================

=========================================================================
*                           Partition Report                            *
=========================================================================

Partition Implementation Status
-------------------------------

  No Partitions were found in this design.

-------------------------------

=========================================================================
*                            Design Summary                             *
=========================================================================

Top Level Output File Name         : R6502_TC.ngc

Primitive and Black Box Usage:
------------------------------
# BELS                             : 2035
#      GND                         : 1
#      INV                         : 2
#      LUT2                        : 136
#      LUT3                        : 182
#      LUT4                        : 203
#      LUT5                        : 355
#      LUT6                        : 1015
#      MUXCY                       : 57
#      MUXF7                       : 35
#      VCC                         : 1
#      XORCY                       : 48
# FlipFlops/Latches                : 285
#      FDC                         : 158
#      FDCE                        : 124
#      FDP                         : 3
# Clock Buffers                    : 1
#      BUFGP                       : 1
# IO Buffers                       : 41
#      IBUF                        : 13
#      OBUF                        : 28

Device utilization summary:
---------------------------

Selected Device : 7a100tcsg324-3 


Slice Logic Utilization: 
 Number of Slice Registers:             285  out of  126800     0%  
 Number of Slice LUTs:                 1893  out of  63400     2%  
    Number used as Logic:              1893  out of  63400     2%  

Slice Logic Distribution: 
 Number of LUT Flip Flop pairs used:   1957
   Number with an unused Flip Flop:    1672  out of   1957    85%  
   Number with an unused LUT:            64  out of   1957     3%  
   Number of fully used LUT-FF pairs:   221  out of   1957    11%  
   Number of unique control sets:        17

IO Utilization: 
 Number of IOs:                          42
 Number of bonded IOBs:                  42  out of    210    20%  

Specific Feature Utilization:
 Number of BUFG/BUFGCTRLs:                1  out of     32     3%  

---------------------------
Partition Resource Summary:
---------------------------

  No Partitions were found in this design.

---------------------------


=========================================================================
Timing Report

NOTE: THESE TIMING NUMBERS ARE ONLY A SYNTHESIS ESTIMATE.
      FOR ACCURATE TIMING INFORMATION PLEASE REFER TO THE TRACE REPORT
      GENERATED AFTER PLACE-and-ROUTE.

Clock Information:
------------------
-----------------------------------+------------------------+-------+
Clock Signal                       | Clock buffer(FF name)  | Load  |
-----------------------------------+------------------------+-------+
clk_clk_i                          | BUFGP                  | 285   |
-----------------------------------+------------------------+-------+

Asynchronous Control Signals Information:
----------------------------------------
No asynchronous control signals found in this design

Timing Summary:
---------------
Speed Grade: -3

   Minimum period: 7.259ns (Maximum Frequency: 137.766MHz)
   Minimum input arrival time before clock: 8.246ns
   Maximum output required time after clock: 0.640ns
   Maximum combinational path delay: No path found

Timing Details:
---------------
All values displayed in nanoseconds (ns)

=========================================================================
Timing constraint: Default period analysis for Clock 'clk_clk_i'
  Clock period: 7.259ns (frequency: 137.766MHz)
  Total number of paths / destination ports: 2935358 / 378
-------------------------------------------------------------------------
Delay:               7.259ns (Levels of Logic = 14)
  Source:            U_0/U_4/zw_REG_OP_6_1 (FF)
  Destination:       U_0/U_4/reg_F_1 (FF)
  Source Clock:      clk_clk_i rising
  Destination Clock: clk_clk_i rising

  Data Path: U_0/U_4/zw_REG_OP_6_1 to U_0/U_4/reg_F_1
                                Gate     Net
    Cell:in->out      fanout   Delay   Delay  Logical Name (Net Name)
    ----------------------------------------  ------------
     FDCE:C->Q             1   0.361   0.556  U_0/U_4/zw_REG_OP_6_1 (U_0/U_4/zw_REG_OP_6_1)
     LUT4:I0->O           34   0.097   0.402  U_0/U_4/GND_6_o_zw_REG_OP[7]_equal_2417_o<7>11 (U_0/U_4/GND_6_o_zw_REG_OP[7]_equal_2417_o<7>1)
     LUT5:I4->O            9   0.097   0.332  U_0/U_4/GND_6_o_zw_REG_OP[7]_equal_2426_o<7>1 (U_0/U_4/GND_6_o_zw_REG_OP[7]_equal_2426_o)
     LUT3:I2->O            7   0.097   0.407  U_0/U_4/Mmux_sig_PC[15]_GND_6_o_mux_875_OUT1101 (U_0/U_4/Mmux_sig_PC[15]_GND_6_o_mux_875_OUT110)
     LUT6:I4->O           27   0.097   0.401  U_0/U_4/current_state_zw_ALU1[4]_zw_ALU3[4]_OR_1103_o11 (U_0/U_4/current_state_zw_ALU1[4]_zw_ALU3[4]_OR_1103_o1)
     LUT4:I3->O            8   0.097   0.589  U_0/U_4/current_state_zw_ALU1<1>3 (U_0/U_4/Madd_GND_6_o_GND_6_o_add_2574_OUT_cy<1>)
     LUT5:I1->O           12   0.097   0.346  U_0/U_4/current_state_zw_ALU1[4]_zw_ALU3[4]_OR_1103_o (U_0/U_4/zw_ALU1[4]_zw_ALU3[4]_OR_1103_o)
     LUT6:I5->O           11   0.097   0.557  U_0/U_4/current_state_zw_ALU2<3> (U_0/U_4/Madd_GND_6_o_GND_6_o_add_2571_OUT_lut<3>)
     LUT4:I1->O            1   0.097   0.295  U_0/U_4/Madd_zw_ALU2[3]_GND_6_o_add_2569_OUT_lut<1>3_SW3 (N270)
     LUT6:I5->O            9   0.097   0.332  U_0/U_4/Madd_zw_ALU2[3]_GND_6_o_add_2569_OUT_lut<1>3 (U_0/U_4/Madd_zw_ALU2[3]_GND_6_o_add_2569_OUT_lut<1>)
     LUT6:I5->O            5   0.097   0.530  U_0/U_4/current_state_zw_ALU<5>4 (U_0/U_4/zw_ALU<5>)
     LUT6:I3->O            3   0.097   0.305  U_0/U_4/Mmux_current_state[7]_reg_F[7]_wide_mux_1012_OUT718 (U_0/U_4/Mmux_current_state[7]_reg_F[7]_wide_mux_1012_OUT718)
     LUT5:I4->O            1   0.097   0.000  U_0/U_4/Mmux_current_state[7]_reg_F[7]_wide_mux_1012_OUT7120_SW1_G (N692)
     MUXF7:I1->O           1   0.279   0.295  U_0/U_4/Mmux_current_state[7]_reg_F[7]_wide_mux_1012_OUT7120_SW1 (N254)
     LUT6:I5->O            1   0.097   0.000  U_0/U_4/Mmux_current_state[7]_reg_F[7]_wide_mux_1012_OUT7123 (U_0/U_4/current_state[7]_reg_F[7]_wide_mux_1012_OUT<1>)
     FDC:D                     0.008          U_0/U_4/reg_F_1
    ----------------------------------------
    Total                      7.259ns (1.909ns logic, 5.350ns route)
                                       (26.3% logic, 73.7% route)

=========================================================================
Timing constraint: Default OFFSET IN BEFORE for Clock 'clk_clk_i'
  Total number of paths / destination ports: 385171 / 658
-------------------------------------------------------------------------
Offset:              8.246ns (Levels of Logic = 17)
  Source:            d_i<1> (PAD)
  Destination:       U_0/U_4/reg_sel_pc_val_0 (FF)
  Destination Clock: clk_clk_i rising

  Data Path: d_i<1> to U_0/U_4/reg_sel_pc_val_0
                                Gate     Net
    Cell:in->out      fanout   Delay   Delay  Logical Name (Net Name)
    ----------------------------------------  ------------
     IBUF:I->O            65   0.001   0.795  d_i_1_IBUF (d_i_1_IBUF)
     LUT5:I0->O           21   0.097   0.647  U_0/U_4/GND_6_o_d_i[7]_equal_1842_o<7>11 (U_0/U_4/GND_6_o_d_i[7]_equal_1842_o<7>1)
     LUT4:I0->O            5   0.097   0.398  U_0/U_4/GND_6_o_d_i[7]_equal_1842_o<7>2 (U_0/U_4/GND_6_o_d_i[7]_equal_1842_o)
     LUT6:I4->O            9   0.097   0.730  U_0/U_4/Mmux_GND_6_o_GND_6_o_mux_1902_OUT1121 (U_0/U_4/Mmux_GND_6_o_GND_6_o_mux_1902_OUT112)
     LUT6:I0->O            2   0.097   0.688  U_0/U_4/_n6060_inv1 (U_0/U_4/_n6060_inv1)
     LUT6:I1->O            2   0.097   0.687  U_0/ld_o_i<0>211 (U_0/ld_o_i<0>211)
     LUT6:I1->O            1   0.097   0.295  U_0/ld_o_i<0>212_SW0 (N294)
     LUT6:I5->O            2   0.097   0.299  U_0/U_4/current_state_ld_pc_o (U_0/ld_pc_o_i)
     LUT2:I1->O            1   0.097   0.279  U_0/U_0/ci_o_i1 (U_0/U_0/ci_o_i)
     MUXCY:CI->O           1   0.023   0.000  U_0/U_0/Madd_u_11combo_proc.temp_sum_Madd_Madd_cy<0> (U_0/U_0/Madd_u_11combo_proc.temp_sum_Madd_Madd_cy<0>)
     MUXCY:CI->O           1   0.023   0.000  U_0/U_0/Madd_u_11combo_proc.temp_sum_Madd_Madd_cy<1> (U_0/U_0/Madd_u_11combo_proc.temp_sum_Madd_Madd_cy<1>)
     MUXCY:CI->O           1   0.023   0.000  U_0/U_0/Madd_u_11combo_proc.temp_sum_Madd_Madd_cy<2> (U_0/U_0/Madd_u_11combo_proc.temp_sum_Madd_Madd_cy<2>)
     XORCY:CI->O           4   0.370   0.525  U_0/U_0/Madd_u_11combo_proc.temp_sum_Madd_Madd_xor<3> (U_0/adr_nxt_pc_o_i<11>)
     LUT6:I3->O            1   0.097   0.295  U_0/U_4/adr_nxt_pc_i[15]_zw_b3[7]_equal_2607_o81 (U_0/U_4/adr_nxt_pc_i[15]_zw_b3[7]_equal_2607_o8)
     LUT6:I5->O            7   0.097   0.323  U_0/U_4/adr_nxt_pc_i[15]_zw_b3[7]_equal_2607_o83 (U_0/U_4/adr_nxt_pc_i[15]_zw_b3[7]_equal_2607_o)
     LUT6:I5->O            2   0.097   0.299  U_0/U_4/_n5572 (U_0/U_4/_n5572)
     LUT6:I5->O            2   0.097   0.283  U_0/U_4/current_state__n5785_inv1 (U_0/U_4/_n5785_inv)
     FDCE:CE                   0.095          U_0/U_4/reg_sel_pc_val_0
    ----------------------------------------
    Total                      8.246ns (1.699ns logic, 6.547ns route)
                                       (20.6% logic, 79.4% route)

=========================================================================
Timing constraint: Default OFFSET OUT AFTER for Clock 'clk_clk_i'
  Total number of paths / destination ports: 28 / 28
-------------------------------------------------------------------------
Offset:              0.640ns (Levels of Logic = 1)
  Source:            U_0/U_4/sig_PC_15 (FF)
  Destination:       a_o<15> (PAD)
  Source Clock:      clk_clk_i rising

  Data Path: U_0/U_4/sig_PC_15 to a_o<15>
                                Gate     Net
    Cell:in->out      fanout   Delay   Delay  Logical Name (Net Name)
    ----------------------------------------  ------------
     FDCE:C->Q             1   0.361   0.279  U_0/U_4/sig_PC_15 (U_0/U_4/sig_PC_15)
     OBUF:I->O                 0.000          a_o_15_OBUF (a_o<15>)
    ----------------------------------------
    Total                      0.640ns (0.361ns logic, 0.279ns route)
                                       (56.4% logic, 43.6% route)

=========================================================================

Cross Clock Domains Report:
--------------------------

Clock to Setup on destination clock clk_clk_i
---------------+---------+---------+---------+---------+
               | Src:Rise| Src:Fall| Src:Rise| Src:Fall|
Source Clock   |Dest:Rise|Dest:Rise|Dest:Fall|Dest:Fall|
---------------+---------+---------+---------+---------+
clk_clk_i      |    7.259|         |         |         |
---------------+---------+---------+---------+---------+

=========================================================================


Total REAL time to Xst completion: 234.00 secs
Total CPU time to Xst completion: 233.67 secs
 
--> 

Total memory usage is 485652 kilobytes

Number of errors   :    0 (   0 filtered)
Number of warnings :    0 (   0 filtered)
Number of infos    :    8 (   0 filtered)

